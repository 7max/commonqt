<page title="CommonQt">
  <p>
    CommonQt is a Common Lisp binding to the smoke library for Qt.
  </p>

  <toc/>

  <section>Download</section>
  <p>
    Get it from git:
  </p>
  <example>git clone git://gitorious.org/commonqt/commonqt.git</example>
  <p>
    (<a href="http://gitorious.org/commonqt/commonqt">gitorious page</a>)
  </p>

  <section>Dependencies (C++)</section>
  <p>
    CommonQt needs:
  </p>
  <ul>
    <li>Qt libraries (tested with 4.5 and 4.6)</li>
    <li>
      The smoke library for Qt, provided by the KDE bindings project
      (but KDE itself is not required).  Currently, kdebindings from svn
      trunk, revision 1064293 is recommended.
    </li>
    <li>
      GNU make and GCC (except on Windows).
    </li>
    <li>
      Visual C++ (on Windows).
    </li>
  </ul>
  <p>
    When downloading Qt windows binaries from Nokia, get the Qt 4.6.2
    libraries built for Visual Studio 2008 Express Edition.  (Don't use
    the binary for MinGW.)
  </p>

  <section>Dependencies (Lisp)</section>
  <p>
    CommonQt needs
    <ul>
      <li><a href="http://common-lisp.net/project/cffi">CFFI</a></li>
      <li><a href="http://common-lisp.net/project/named-readtables/">named-readtables</a></li>
      <li><a href="http://www.weitz.de/cl-ppcre/">CL-PPCRE</a></li>
      <li><a href="http://common-lisp.net/project/alexandria/">Alexandria</a></li>
      <li><a href="http://www.cliki.net/closer-mop">closer-mop</a></li>
      <li><a href="http://common-lisp.net/project/iterate/">Iterate</a></li>
      <li><a href="http://www.cliki.net/trivial-garbage">trivial-garbage</a></li>
    </ul>
    and their dependencies.
  </p>
  <p>
    Also needed: A Lisp implementation.  Lately, SBCL and CCL have been
    tested, but it has also run successfully on Allegro and LispWorks in
    the past.
  </p>
  <p>
    On Windows, it has been tested with Clozure CL 1.4.
  </p>
  <section>Installation</section>
  <p>
    <a href="http://www.cliki.net/asdf">ASDF</a> is used for
    compilation.  Register the .asd file, e.g. by symlinking it,
    then compile the QT system using <tt>asdf:operate</tt>.
  </p>
  <pre>$ ln -sf `pwd`/qt.asd /path/to/your/registry/
* (asdf:operate 'asdf:load-op :qt)</pre>
  <p>
    And to follow the tutorial:
  </p>
  <pre>$ ln -sf `pwd`/qt-tutorial.asd /path/to/your/registry/
* (asdf:operate 'asdf:load-op :qt-tutorial)</pre>

  <p>
    The ASDF system runs <tt>make</tt> for you automatically to build
    the C++ wrapper library <tt>libcommonqt.so</tt> (except on Windows).
  </p>
  <p>
    Run <tt>qmake</tt> followed by <tt>make</tt> yourself for
    troubleshooting.
  </p>
  <p>
    (On Windows, run <tt>qmake</tt> followed by <tt>vcbuild</tt>.)
  </p>

  <section>Examples</section>
  <ul>
    <li>
      Lisp translations of the
      <a href="http://doc.trolltech.com/4.3/tutorial.html">Qt
	tutorial</a>, step 14:
      <a href="http://doc.trolltech.com/4.3/tutorial-t14.html">
	C++ version</a>,
      <a href="http://www.lichteblau.com/git/?p=commonqt.git;a=blob;f=tutorial/t14.lisp;hb=master">
	Lisp version</a>
    </li>
    <li>
      Trivial
      <a href="http://www.lichteblau.com/git/?p=commonqt.git;a=blob;f=tutorial/conv.lisp;hb=master">
	currency conversion dialog</a>
      (a typical Mac GUI programming example, I'm told)
    </li>
  </ul>

  <section>Calling instance methods</section>
  <p>
    Use the <tt>#_</tt> reader macro to invoke Qt methods easily.
  </p>
  <p>
    Example:
  </p>
  <example>(#_setGeometry window 100 100 500 355)</example>
  <example>(#_show window)</example>
  <p>
    The first argument is the instance to call the method on, the
    following arguments are passed on to the method.
  </p>
  <p>
    Method names are case sensitive.
  </p>
  <p>
    The reader macro expands into a use of the <tt>qt:call</tt> function.
  </p>
  <p>
    To enable the reader macro, use <tt>(enable-syntax)</tt> at the top
    of your file, while is short for <tt>(named-readtables:in-readtable :qt)</tt>.
  </p>

  <section>Calling static methods</section>
  <p>
    Static methods:
  </p>
  <p>
    Example:
  </p>
  <example>(#_Qt::blue)</example>

  <section>Instantiating Qt classes</section>
  <p>
    The reader macro for <tt>#_</tt> has a special case: If it is
    followed by <tt>new</tt>, it keeps reading to find a class name,
    then returns a call to a constructor instead.
  </p>
  <p>
    Example:
  </p>
  <example>(#_new QPushButton "Quit")</example>
  <p>
    Class names are case-sensitive.
  </p>
  <p>
    In this case, the macro expands into a use of the <tt>qt:new</tt>
    function.
  </p>

  <section>Connecting signals and slots</section>
  <p>
    When connecting signals and slots, C++ programmers would use the
    macros <tt>SLOT</tt> and <tt>SIGNAL</tt> to disambiguate string and
    signal names from each other.  We call these <tt>QSLOT</tt>
    and <tt>QSIGNAL</tt>.
  </p>
  <p>
    Note that <tt>QObject::connect</tt>() is a static method on QObject.
  </p>
  <example>(#_connect "QObject"
           quit-button (QSIGNAL "clicked()")
           application (QSLOT "quit()"))</example>

  <section>QApplication</section>
  <p>
    The constructor for <tt>QApplication</tt> requires more FFI magic
    than you would probably want to write yourself, because it is
    designed to take the <tt>(int* argc, void** argc)</tt> arguments
    from a <tt>main</tt> function in C.
  </p>
  <p>
    Use the <tt>make-qapplication</tt> function provided by Qt instead,
    which takes string arguments and converts them.
  </p>
  <p>
    Examples:
  </p>
  <example>(setf qt-user:*application* (qt:make-qapplication))</example>
  <example>(setf qt-user:*application* (qt:make-qapplication "-display" ":0"))</example>
  <p>
  </p>

  <section>Subclassing C++ classes</section>
  <p>
    You can make "subclasses" using smoke like this:
  </p>
  <example>
(defclass button ()
    ()
  (:metaclass qt-class)
  (:qt-superclass "QPushButton"))

(defmethod initialize-instance :after ((instance button))

  ;; Must call the C++ constructor here first:
  (new instance "label")

  ;; can call C++ methods on this lisp object afterwards:
  (#_connect "QObject"
             instance (QSIGNAL "clicked()")
             *application* (QSLOT "quit()")))
</example>
  <p>
    Always specify the metaclass.  Specify the <tt>qt-superclass</tt>
    only when not subclassing another such Lisp class that already has
    it.  Above we didn't specify a superclass, so it was defaulted to
    <tt>qt:dynamic-object</tt>, a subclass of <tt>qt:qobject</tt>.
  </p>
  <p>
    Always call the C++ constructor from <tt>initialize-instance</tt>.
    Note the use of <tt>qt:new</tt> with an existing instance that
    already knows its class (but doesn't have a pointer slot yet).
  </p>

  <section>Overriding C++ methods</section>
  <p>
    In a subclass (see the example above), you can override C++ methods
    like this:
  </p>
  <example>
(defclass canvas ()
    ()
  (:metaclass qt-class)
  (:qt-superclass "QWidget")
  (:override ("paintEvent" paint-event)))

(defmethod paint-event ((this canvas) paint-event)
  (declare (ignore paint-event))
  (let ((painter (#_new QPainter this)))
    ... paint something ...
    (#_end painter)))
  </example>
  <p>
    In overriding methods, you can call <tt>qt:call-next-qmethod</tt> to
    call the C++ method that is being intercepted.
  </p>
  <p>
    Note that we always intercept all methods of the specified name,
    ignoring their argument type signature.  In this case, there's only
    one method called paintEvent, so that is safe to do.  If there was a
    second paintEvent method without arguments, you'd have to use
    &amp;optional or &amp;rest to avoid errors.
  </p>

  <section>Defining signals and slots</section>
  <p>
    In a subclass (see the example above), you can add signals and slots.
    Here is a real example from tutorial 13:
  </p>
  <example>
(defclass cannon-field ()
    (...)
  (:metaclass qt-class)
  (:qt-superclass "QWidget")
  (:slots ("setAngle(int)" (lambda (this newval)
                             (setf (current-angle this)
                                   (min (max 5 newval) 70))))
          ("setForce(int)" (lambda (this newval)
                             (setf (current-force this)
                                   (max 0 newval))))
          ("void moveShot()" move-shot)
          ("void shoot()" shoot)
          ("void setGameOver()" set-game-over)
          ("void restartGame()" restart-game))
  (:signals ("angleChanged(int)")
            ("forceChanged(int)")
            ("void hit()")
            ("void missed()")
            ("void canShoot(bool)")))
</example>
  <p>
    Note the use of <tt>lambda</tt> to pre-process values and swap
    arguments in slots that are meant to just call a CLOS accessor
    eventually, and the use of lisp function names elsewhere.
  </p>
  <p>
    Signals don't have a corresponding Lisp function.  Emit them like this:
    <tt>(emit-signal object signal-name arguments)</tt>
  </p>
  
  <section>QAPROPOS</section>
  <p>
    There a function <tt>qapropos</tt> similar in spirit
    to <tt>apropos</tt> which looks for Qt classes and methods.
  </p>
  <p>
    Example:
  </p>
  <example>
QT-USER> (qapropos "sliderposition")
Method QAbstractSlider.setSliderPosition [660]
Method QAbstractSlider.sliderPosition [661]
Method QStyle.sliderPositionFromValue [14984]
Method QStyle.sliderPositionFromValue [14985]
Method QStyleOptionSlider.sliderPosition [15351]
Method QStyleOptionSlider.setSliderPosition [15364]
  </example>

  <section>QDESCRIBE for classes</section>
  <p>
    There a function <tt>qdescribe</tt> similar in spirit
    to <tt>describe</tt>.
  </p>
  <p>
    Example for a class name:
  </p>
  <example>
QT-USER> (qdescribe "QPushButton")
#&lt;QCLASS QPushButton> is a smoke class

    name: QPushButton
    flags: VIRTUAL, CONSTRUCTOR

Superclasses:
    QAbstractButton
        QWidget
            QObject
            QPaintDevice

Methods:
    paintEvent#               QPushButton.paintEvent [12423]
    minimumSizeHint           QPushButton.minimumSizeHint [12409]
    metaObject                QPushButton.metaObject [12399]
    menu                      QPushButton.menu [12415]

    <i>[long list trimmed here]</i>

    QPushButton               QPushButton.QPushButton [12402]

Use (QDESCRIBE "QPushButton" T) to see inherited methods.

Properties:
    bool autoDefault                    
    bool default                        
    bool flat                           

Use (QDESCRIBE "QPushButton" T) to see inherited properties.
  </example>

  <section>QDESCRIBE for methods</section>
  <p>
    <tt>qdescribe</tt> can also show methods, if used with a string
    of the form classname.methodname:
  </p>
  <example>
QT-USER> (qdescribe "QPushButton.paintEvent")
#&lt;QMETHOD QPushButton.paintEvent> is a smoke method
    class: #&lt;QCLASS QPushButton>
    name: paintEvent
    return type: NIL
    flags: PROTECTED
  argument types:
    #&lt;QTYPE (QPaintEvent*) kind: POINTER, stack: CLASS, class: #&lt;QCLASS QPaintEvent>>
  </example>
  <p>
    If there are several methods of that name, it shows each method with
    its arguments.
  </p>

  <section>QDESCRIBE for objects</section>
  <p>
    <tt>qdescribe</tt> on Qt objects can show their property values at
    run time:
  </p>
  <example>
QT-USER> (enable-syntax)

QT-USER> (qdescribe (#_new QPushButton "test"))
#&lt;QPushButton 0x27A654D0> is a smoke object.

Use (QDESCRIBE "QPushButton") to see details about its C++ class.

Properties:
    QString objectName                  ""
    bool modal                          NIL
    Qt::WindowModality windowModality   #&lt;QVariant 0x27A65100>
    bool enabled                        T
    QRect geometry                      #&lt;QRect 0x27443860>
    QRect frameGeometry                 #&lt;QRect 0x27A66E20>
    QRect normalGeometry                #&lt;QRect 0x27A63540>
    int x                               0
    int y                               0
    QString text                        "test"

    <i>[long list trimmed here]</i>
  </example>
  <p>
    If there are several methods of that name, it shows each method with
    its arguments.
  </p>

  <section>How about CLOS bindings?</section>
  <p>
    CommonQt does not provide CLOS bindings.  There is a different
    project
    called <a href="http://tobias.rautenkranz.ch/lisp/cl-smoke/cl-smoke">cl-smoke</a>
    which takes that route. 
  </p>
</page>
